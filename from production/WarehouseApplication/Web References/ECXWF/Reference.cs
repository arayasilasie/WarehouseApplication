//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace WarehouseApplication.ECXWF {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ECXEngineSoap", Namespace="http://tempuri.org/")]
    public partial class ECXEngine : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback OpenTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionsByTaskNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOfTransactionsByTaskNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionsByTaskNameWithCreatedTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveTransactionTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTransactionTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActiveApplicationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockSpecificTransactionTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockMessageByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllMessageByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockAllMessagePassedDurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTransactionFromStackOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTransactionWithLockedMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProgressByTaskNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProgressByTaskNamesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ECXEngine() {
            this.Url = global::WarehouseApplication.Properties.Settings.Default.WarehouseApplication_ECXWF_ECXEngine;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event OpenTransactionCompletedEventHandler OpenTransactionCompleted;
        
        /// <remarks/>
        public event GetTransactionsByTaskNameCompletedEventHandler GetTransactionsByTaskNameCompleted;
        
        /// <remarks/>
        public event GetListOfTransactionsByTaskNameCompletedEventHandler GetListOfTransactionsByTaskNameCompleted;
        
        /// <remarks/>
        public event GetTransactionsByTaskNameWithCreatedTimeCompletedEventHandler GetTransactionsByTaskNameWithCreatedTimeCompleted;
        
        /// <remarks/>
        public event RemoveTransactionCompletedEventHandler RemoveTransactionCompleted;
        
        /// <remarks/>
        public event RequestCompletedEventHandler RequestCompleted;
        
        /// <remarks/>
        public event ResponseCompletedEventHandler ResponseCompleted;
        
        /// <remarks/>
        public event GetTransactionTypesCompletedEventHandler GetTransactionTypesCompleted;
        
        /// <remarks/>
        public event GetActiveTransactionTypesCompletedEventHandler GetActiveTransactionTypesCompleted;
        
        /// <remarks/>
        public event GetAllTransactionTypesCompletedEventHandler GetAllTransactionTypesCompleted;
        
        /// <remarks/>
        public event GetActiveApplicationsCompletedEventHandler GetActiveApplicationsCompleted;
        
        /// <remarks/>
        public event EditRequestCompletedEventHandler EditRequestCompleted;
        
        /// <remarks/>
        public event EditResponseCompletedEventHandler EditResponseCompleted;
        
        /// <remarks/>
        public event CloseTransactionCompletedEventHandler CloseTransactionCompleted;
        
        /// <remarks/>
        public event UnlockTaskCompletedEventHandler UnlockTaskCompleted;
        
        /// <remarks/>
        public event UnlockSpecificTransactionTaskCompletedEventHandler UnlockSpecificTransactionTaskCompleted;
        
        /// <remarks/>
        public event UnlockMessageByUserCompletedEventHandler UnlockMessageByUserCompleted;
        
        /// <remarks/>
        public event UnlockAllMessageByUserCompletedEventHandler UnlockAllMessageByUserCompleted;
        
        /// <remarks/>
        public event UnlockAllMessagePassedDurationCompletedEventHandler UnlockAllMessagePassedDurationCompleted;
        
        /// <remarks/>
        public event RemoveTransactionFromStackCompletedEventHandler RemoveTransactionFromStackCompleted;
        
        /// <remarks/>
        public event CloseCompletedEventHandler CloseCompleted;
        
        /// <remarks/>
        public event CloseTaskCompletedEventHandler CloseTaskCompleted;
        
        /// <remarks/>
        public event GetAllTransactionWithLockedMessagesCompletedEventHandler GetAllTransactionWithLockedMessagesCompleted;
        
        /// <remarks/>
        public event GetProgressByTaskNameCompletedEventHandler GetProgressByTaskNameCompleted;
        
        /// <remarks/>
        public event GetProgressByTaskNamesCompletedEventHandler GetProgressByTaskNamesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OpenTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CMessage[] OpenTransaction(System.Guid TransactionTypeGuid, System.Guid CreatedBy, string[] LocationCode, string SystemLocation, out string TransactionNo) {
            object[] results = this.Invoke("OpenTransaction", new object[] {
                        TransactionTypeGuid,
                        CreatedBy,
                        LocationCode,
                        SystemLocation});
            TransactionNo = ((string)(results[1]));
            return ((CMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void OpenTransactionAsync(System.Guid TransactionTypeGuid, System.Guid CreatedBy, string[] LocationCode, string SystemLocation) {
            this.OpenTransactionAsync(TransactionTypeGuid, CreatedBy, LocationCode, SystemLocation, null);
        }
        
        /// <remarks/>
        public void OpenTransactionAsync(System.Guid TransactionTypeGuid, System.Guid CreatedBy, string[] LocationCode, string SystemLocation, object userState) {
            if ((this.OpenTransactionOperationCompleted == null)) {
                this.OpenTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpenTransactionOperationCompleted);
            }
            this.InvokeAsync("OpenTransaction", new object[] {
                        TransactionTypeGuid,
                        CreatedBy,
                        LocationCode,
                        SystemLocation}, this.OpenTransactionOperationCompleted, userState);
        }
        
        private void OnOpenTransactionOperationCompleted(object arg) {
            if ((this.OpenTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpenTransactionCompleted(this, new OpenTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionsByTaskName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetTransactionsByTaskName(string TransactionTypeCode, string TaskName, string Step) {
            object[] results = this.Invoke("GetTransactionsByTaskName", new object[] {
                        TransactionTypeCode,
                        TaskName,
                        Step});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionsByTaskNameAsync(string TransactionTypeCode, string TaskName, string Step) {
            this.GetTransactionsByTaskNameAsync(TransactionTypeCode, TaskName, Step, null);
        }
        
        /// <remarks/>
        public void GetTransactionsByTaskNameAsync(string TransactionTypeCode, string TaskName, string Step, object userState) {
            if ((this.GetTransactionsByTaskNameOperationCompleted == null)) {
                this.GetTransactionsByTaskNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionsByTaskNameOperationCompleted);
            }
            this.InvokeAsync("GetTransactionsByTaskName", new object[] {
                        TransactionTypeCode,
                        TaskName,
                        Step}, this.GetTransactionsByTaskNameOperationCompleted, userState);
        }
        
        private void OnGetTransactionsByTaskNameOperationCompleted(object arg) {
            if ((this.GetTransactionsByTaskNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionsByTaskNameCompleted(this, new GetTransactionsByTaskNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOfTransactionsByTaskName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CTaskNameWithTranAndStartDate[] GetListOfTransactionsByTaskName(string TransactionTypeCode, string[] TaskName) {
            object[] results = this.Invoke("GetListOfTransactionsByTaskName", new object[] {
                        TransactionTypeCode,
                        TaskName});
            return ((CTaskNameWithTranAndStartDate[])(results[0]));
        }
        
        /// <remarks/>
        public void GetListOfTransactionsByTaskNameAsync(string TransactionTypeCode, string[] TaskName) {
            this.GetListOfTransactionsByTaskNameAsync(TransactionTypeCode, TaskName, null);
        }
        
        /// <remarks/>
        public void GetListOfTransactionsByTaskNameAsync(string TransactionTypeCode, string[] TaskName, object userState) {
            if ((this.GetListOfTransactionsByTaskNameOperationCompleted == null)) {
                this.GetListOfTransactionsByTaskNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOfTransactionsByTaskNameOperationCompleted);
            }
            this.InvokeAsync("GetListOfTransactionsByTaskName", new object[] {
                        TransactionTypeCode,
                        TaskName}, this.GetListOfTransactionsByTaskNameOperationCompleted, userState);
        }
        
        private void OnGetListOfTransactionsByTaskNameOperationCompleted(object arg) {
            if ((this.GetListOfTransactionsByTaskNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOfTransactionsByTaskNameCompleted(this, new GetListOfTransactionsByTaskNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionsByTaskNameWithCreatedTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CTransactionWithCreatedTime[] GetTransactionsByTaskNameWithCreatedTime(string TransactionTypeCode, string TaskName, string Step) {
            object[] results = this.Invoke("GetTransactionsByTaskNameWithCreatedTime", new object[] {
                        TransactionTypeCode,
                        TaskName,
                        Step});
            return ((CTransactionWithCreatedTime[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionsByTaskNameWithCreatedTimeAsync(string TransactionTypeCode, string TaskName, string Step) {
            this.GetTransactionsByTaskNameWithCreatedTimeAsync(TransactionTypeCode, TaskName, Step, null);
        }
        
        /// <remarks/>
        public void GetTransactionsByTaskNameWithCreatedTimeAsync(string TransactionTypeCode, string TaskName, string Step, object userState) {
            if ((this.GetTransactionsByTaskNameWithCreatedTimeOperationCompleted == null)) {
                this.GetTransactionsByTaskNameWithCreatedTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionsByTaskNameWithCreatedTimeOperationCompleted);
            }
            this.InvokeAsync("GetTransactionsByTaskNameWithCreatedTime", new object[] {
                        TransactionTypeCode,
                        TaskName,
                        Step}, this.GetTransactionsByTaskNameWithCreatedTimeOperationCompleted, userState);
        }
        
        private void OnGetTransactionsByTaskNameWithCreatedTimeOperationCompleted(object arg) {
            if ((this.GetTransactionsByTaskNameWithCreatedTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionsByTaskNameWithCreatedTimeCompleted(this, new GetTransactionsByTaskNameWithCreatedTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveTransaction(string TransactionNo) {
            object[] results = this.Invoke("RemoveTransaction", new object[] {
                        TransactionNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTransactionAsync(string TransactionNo) {
            this.RemoveTransactionAsync(TransactionNo, null);
        }
        
        /// <remarks/>
        public void RemoveTransactionAsync(string TransactionNo, object userState) {
            if ((this.RemoveTransactionOperationCompleted == null)) {
                this.RemoveTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTransactionOperationCompleted);
            }
            this.InvokeAsync("RemoveTransaction", new object[] {
                        TransactionNo}, this.RemoveTransactionOperationCompleted, userState);
        }
        
        private void OnRemoveTransactionOperationCompleted(object arg) {
            if ((this.RemoveTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTransactionCompleted(this, new RemoveTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Request", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CMessage[] Request(string TransactionNo, System.Guid LoggedUser, string[] LocationCode) {
            object[] results = this.Invoke("Request", new object[] {
                        TransactionNo,
                        LoggedUser,
                        LocationCode});
            return ((CMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void RequestAsync(string TransactionNo, System.Guid LoggedUser, string[] LocationCode) {
            this.RequestAsync(TransactionNo, LoggedUser, LocationCode, null);
        }
        
        /// <remarks/>
        public void RequestAsync(string TransactionNo, System.Guid LoggedUser, string[] LocationCode, object userState) {
            if ((this.RequestOperationCompleted == null)) {
                this.RequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestOperationCompleted);
            }
            this.InvokeAsync("Request", new object[] {
                        TransactionNo,
                        LoggedUser,
                        LocationCode}, this.RequestOperationCompleted, userState);
        }
        
        private void OnRequestOperationCompleted(object arg) {
            if ((this.RequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestCompleted(this, new RequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Response", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Response(string TransactionNo, CMessage message) {
            object[] results = this.Invoke("Response", new object[] {
                        TransactionNo,
                        message});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ResponseAsync(string TransactionNo, CMessage message) {
            this.ResponseAsync(TransactionNo, message, null);
        }
        
        /// <remarks/>
        public void ResponseAsync(string TransactionNo, CMessage message, object userState) {
            if ((this.ResponseOperationCompleted == null)) {
                this.ResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResponseOperationCompleted);
            }
            this.InvokeAsync("Response", new object[] {
                        TransactionNo,
                        message}, this.ResponseOperationCompleted, userState);
        }
        
        private void OnResponseOperationCompleted(object arg) {
            if ((this.ResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResponseCompleted(this, new ResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTransactionTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CTransactionType[] GetTransactionTypes(System.Guid ApplicationId) {
            object[] results = this.Invoke("GetTransactionTypes", new object[] {
                        ApplicationId});
            return ((CTransactionType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionTypesAsync(System.Guid ApplicationId) {
            this.GetTransactionTypesAsync(ApplicationId, null);
        }
        
        /// <remarks/>
        public void GetTransactionTypesAsync(System.Guid ApplicationId, object userState) {
            if ((this.GetTransactionTypesOperationCompleted == null)) {
                this.GetTransactionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionTypesOperationCompleted);
            }
            this.InvokeAsync("GetTransactionTypes", new object[] {
                        ApplicationId}, this.GetTransactionTypesOperationCompleted, userState);
        }
        
        private void OnGetTransactionTypesOperationCompleted(object arg) {
            if ((this.GetTransactionTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionTypesCompleted(this, new GetTransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveTransactionTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CTransactionType[] GetActiveTransactionTypes(System.Guid ApplicationId) {
            object[] results = this.Invoke("GetActiveTransactionTypes", new object[] {
                        ApplicationId});
            return ((CTransactionType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveTransactionTypesAsync(System.Guid ApplicationId) {
            this.GetActiveTransactionTypesAsync(ApplicationId, null);
        }
        
        /// <remarks/>
        public void GetActiveTransactionTypesAsync(System.Guid ApplicationId, object userState) {
            if ((this.GetActiveTransactionTypesOperationCompleted == null)) {
                this.GetActiveTransactionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveTransactionTypesOperationCompleted);
            }
            this.InvokeAsync("GetActiveTransactionTypes", new object[] {
                        ApplicationId}, this.GetActiveTransactionTypesOperationCompleted, userState);
        }
        
        private void OnGetActiveTransactionTypesOperationCompleted(object arg) {
            if ((this.GetActiveTransactionTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveTransactionTypesCompleted(this, new GetActiveTransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTransactionTypes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CTransactionType[] GetAllTransactionTypes() {
            object[] results = this.Invoke("GetAllTransactionTypes", new object[0]);
            return ((CTransactionType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTransactionTypesAsync() {
            this.GetAllTransactionTypesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllTransactionTypesAsync(object userState) {
            if ((this.GetAllTransactionTypesOperationCompleted == null)) {
                this.GetAllTransactionTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTransactionTypesOperationCompleted);
            }
            this.InvokeAsync("GetAllTransactionTypes", new object[0], this.GetAllTransactionTypesOperationCompleted, userState);
        }
        
        private void OnGetAllTransactionTypesOperationCompleted(object arg) {
            if ((this.GetAllTransactionTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTransactionTypesCompleted(this, new GetAllTransactionTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActiveApplications", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CApplication[] GetActiveApplications() {
            object[] results = this.Invoke("GetActiveApplications", new object[0]);
            return ((CApplication[])(results[0]));
        }
        
        /// <remarks/>
        public void GetActiveApplicationsAsync() {
            this.GetActiveApplicationsAsync(null);
        }
        
        /// <remarks/>
        public void GetActiveApplicationsAsync(object userState) {
            if ((this.GetActiveApplicationsOperationCompleted == null)) {
                this.GetActiveApplicationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActiveApplicationsOperationCompleted);
            }
            this.InvokeAsync("GetActiveApplications", new object[0], this.GetActiveApplicationsOperationCompleted, userState);
        }
        
        private void OnGetActiveApplicationsOperationCompleted(object arg) {
            if ((this.GetActiveApplicationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActiveApplicationsCompleted(this, new GetActiveApplicationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EditRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CMessage EditRequest(string TransactionNo, string TaskName, bool IsForm, System.Guid LoggedUser, string[] LocationCode) {
            object[] results = this.Invoke("EditRequest", new object[] {
                        TransactionNo,
                        TaskName,
                        IsForm,
                        LoggedUser,
                        LocationCode});
            return ((CMessage)(results[0]));
        }
        
        /// <remarks/>
        public void EditRequestAsync(string TransactionNo, string TaskName, bool IsForm, System.Guid LoggedUser, string[] LocationCode) {
            this.EditRequestAsync(TransactionNo, TaskName, IsForm, LoggedUser, LocationCode, null);
        }
        
        /// <remarks/>
        public void EditRequestAsync(string TransactionNo, string TaskName, bool IsForm, System.Guid LoggedUser, string[] LocationCode, object userState) {
            if ((this.EditRequestOperationCompleted == null)) {
                this.EditRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditRequestOperationCompleted);
            }
            this.InvokeAsync("EditRequest", new object[] {
                        TransactionNo,
                        TaskName,
                        IsForm,
                        LoggedUser,
                        LocationCode}, this.EditRequestOperationCompleted, userState);
        }
        
        private void OnEditRequestOperationCompleted(object arg) {
            if ((this.EditRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditRequestCompleted(this, new EditRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EditResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CMessage[] EditResponse(string TransactionNo, CMessage message, System.Guid LoggedUser, string[] LocationCode) {
            object[] results = this.Invoke("EditResponse", new object[] {
                        TransactionNo,
                        message,
                        LoggedUser,
                        LocationCode});
            return ((CMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void EditResponseAsync(string TransactionNo, CMessage message, System.Guid LoggedUser, string[] LocationCode) {
            this.EditResponseAsync(TransactionNo, message, LoggedUser, LocationCode, null);
        }
        
        /// <remarks/>
        public void EditResponseAsync(string TransactionNo, CMessage message, System.Guid LoggedUser, string[] LocationCode, object userState) {
            if ((this.EditResponseOperationCompleted == null)) {
                this.EditResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditResponseOperationCompleted);
            }
            this.InvokeAsync("EditResponse", new object[] {
                        TransactionNo,
                        message,
                        LoggedUser,
                        LocationCode}, this.EditResponseOperationCompleted, userState);
        }
        
        private void OnEditResponseOperationCompleted(object arg) {
            if ((this.EditResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditResponseCompleted(this, new EditResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseTransaction", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseTransaction(string TransactionNo) {
            this.Invoke("CloseTransaction", new object[] {
                        TransactionNo});
        }
        
        /// <remarks/>
        public void CloseTransactionAsync(string TransactionNo) {
            this.CloseTransactionAsync(TransactionNo, null);
        }
        
        /// <remarks/>
        public void CloseTransactionAsync(string TransactionNo, object userState) {
            if ((this.CloseTransactionOperationCompleted == null)) {
                this.CloseTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseTransactionOperationCompleted);
            }
            this.InvokeAsync("CloseTransaction", new object[] {
                        TransactionNo}, this.CloseTransactionOperationCompleted, userState);
        }
        
        private void OnCloseTransactionOperationCompleted(object arg) {
            if ((this.CloseTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockTask(string TransactionNo) {
            this.Invoke("UnlockTask", new object[] {
                        TransactionNo});
        }
        
        /// <remarks/>
        public void UnlockTaskAsync(string TransactionNo) {
            this.UnlockTaskAsync(TransactionNo, null);
        }
        
        /// <remarks/>
        public void UnlockTaskAsync(string TransactionNo, object userState) {
            if ((this.UnlockTaskOperationCompleted == null)) {
                this.UnlockTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockTaskOperationCompleted);
            }
            this.InvokeAsync("UnlockTask", new object[] {
                        TransactionNo}, this.UnlockTaskOperationCompleted, userState);
        }
        
        private void OnUnlockTaskOperationCompleted(object arg) {
            if ((this.UnlockTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockSpecificTransactionTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockSpecificTransactionTask(string TransactionNo, string TaskName) {
            this.Invoke("UnlockSpecificTransactionTask", new object[] {
                        TransactionNo,
                        TaskName});
        }
        
        /// <remarks/>
        public void UnlockSpecificTransactionTaskAsync(string TransactionNo, string TaskName) {
            this.UnlockSpecificTransactionTaskAsync(TransactionNo, TaskName, null);
        }
        
        /// <remarks/>
        public void UnlockSpecificTransactionTaskAsync(string TransactionNo, string TaskName, object userState) {
            if ((this.UnlockSpecificTransactionTaskOperationCompleted == null)) {
                this.UnlockSpecificTransactionTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockSpecificTransactionTaskOperationCompleted);
            }
            this.InvokeAsync("UnlockSpecificTransactionTask", new object[] {
                        TransactionNo,
                        TaskName}, this.UnlockSpecificTransactionTaskOperationCompleted, userState);
        }
        
        private void OnUnlockSpecificTransactionTaskOperationCompleted(object arg) {
            if ((this.UnlockSpecificTransactionTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockSpecificTransactionTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockMessageByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockMessageByUser(string TransactionNo, string TaskName, System.Guid LoggedUser) {
            this.Invoke("UnlockMessageByUser", new object[] {
                        TransactionNo,
                        TaskName,
                        LoggedUser});
        }
        
        /// <remarks/>
        public void UnlockMessageByUserAsync(string TransactionNo, string TaskName, System.Guid LoggedUser) {
            this.UnlockMessageByUserAsync(TransactionNo, TaskName, LoggedUser, null);
        }
        
        /// <remarks/>
        public void UnlockMessageByUserAsync(string TransactionNo, string TaskName, System.Guid LoggedUser, object userState) {
            if ((this.UnlockMessageByUserOperationCompleted == null)) {
                this.UnlockMessageByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockMessageByUserOperationCompleted);
            }
            this.InvokeAsync("UnlockMessageByUser", new object[] {
                        TransactionNo,
                        TaskName,
                        LoggedUser}, this.UnlockMessageByUserOperationCompleted, userState);
        }
        
        private void OnUnlockMessageByUserOperationCompleted(object arg) {
            if ((this.UnlockMessageByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockMessageByUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAllMessageByUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockAllMessageByUser(System.Guid UserGuid) {
            this.Invoke("UnlockAllMessageByUser", new object[] {
                        UserGuid});
        }
        
        /// <remarks/>
        public void UnlockAllMessageByUserAsync(System.Guid UserGuid) {
            this.UnlockAllMessageByUserAsync(UserGuid, null);
        }
        
        /// <remarks/>
        public void UnlockAllMessageByUserAsync(System.Guid UserGuid, object userState) {
            if ((this.UnlockAllMessageByUserOperationCompleted == null)) {
                this.UnlockAllMessageByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllMessageByUserOperationCompleted);
            }
            this.InvokeAsync("UnlockAllMessageByUser", new object[] {
                        UserGuid}, this.UnlockAllMessageByUserOperationCompleted, userState);
        }
        
        private void OnUnlockAllMessageByUserOperationCompleted(object arg) {
            if ((this.UnlockAllMessageByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllMessageByUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnlockAllMessagePassedDuration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnlockAllMessagePassedDuration(int Minute) {
            this.Invoke("UnlockAllMessagePassedDuration", new object[] {
                        Minute});
        }
        
        /// <remarks/>
        public void UnlockAllMessagePassedDurationAsync(int Minute) {
            this.UnlockAllMessagePassedDurationAsync(Minute, null);
        }
        
        /// <remarks/>
        public void UnlockAllMessagePassedDurationAsync(int Minute, object userState) {
            if ((this.UnlockAllMessagePassedDurationOperationCompleted == null)) {
                this.UnlockAllMessagePassedDurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockAllMessagePassedDurationOperationCompleted);
            }
            this.InvokeAsync("UnlockAllMessagePassedDuration", new object[] {
                        Minute}, this.UnlockAllMessagePassedDurationOperationCompleted, userState);
        }
        
        private void OnUnlockAllMessagePassedDurationOperationCompleted(object arg) {
            if ((this.UnlockAllMessagePassedDurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockAllMessagePassedDurationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveTransactionFromStack", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveTransactionFromStack(string TransactionNo) {
            this.Invoke("RemoveTransactionFromStack", new object[] {
                        TransactionNo});
        }
        
        /// <remarks/>
        public void RemoveTransactionFromStackAsync(string TransactionNo) {
            this.RemoveTransactionFromStackAsync(TransactionNo, null);
        }
        
        /// <remarks/>
        public void RemoveTransactionFromStackAsync(string TransactionNo, object userState) {
            if ((this.RemoveTransactionFromStackOperationCompleted == null)) {
                this.RemoveTransactionFromStackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTransactionFromStackOperationCompleted);
            }
            this.InvokeAsync("RemoveTransactionFromStack", new object[] {
                        TransactionNo}, this.RemoveTransactionFromStackOperationCompleted, userState);
        }
        
        private void OnRemoveTransactionFromStackOperationCompleted(object arg) {
            if ((this.RemoveTransactionFromStackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTransactionFromStackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Close", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Close(System.Guid LoggedUser) {
            this.Invoke("Close", new object[] {
                        LoggedUser});
        }
        
        /// <remarks/>
        public void CloseAsync(System.Guid LoggedUser) {
            this.CloseAsync(LoggedUser, null);
        }
        
        /// <remarks/>
        public void CloseAsync(System.Guid LoggedUser, object userState) {
            if ((this.CloseOperationCompleted == null)) {
                this.CloseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseOperationCompleted);
            }
            this.InvokeAsync("Close", new object[] {
                        LoggedUser}, this.CloseOperationCompleted, userState);
        }
        
        private void OnCloseOperationCompleted(object arg) {
            if ((this.CloseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CloseTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseTask(CMessage message, System.Guid LoggedUser) {
            this.Invoke("CloseTask", new object[] {
                        message,
                        LoggedUser});
        }
        
        /// <remarks/>
        public void CloseTaskAsync(CMessage message, System.Guid LoggedUser) {
            this.CloseTaskAsync(message, LoggedUser, null);
        }
        
        /// <remarks/>
        public void CloseTaskAsync(CMessage message, System.Guid LoggedUser, object userState) {
            if ((this.CloseTaskOperationCompleted == null)) {
                this.CloseTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseTaskOperationCompleted);
            }
            this.InvokeAsync("CloseTask", new object[] {
                        message,
                        LoggedUser}, this.CloseTaskOperationCompleted, userState);
        }
        
        private void OnCloseTaskOperationCompleted(object arg) {
            if ((this.CloseTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTransactionWithLockedMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SCTransaction[] GetAllTransactionWithLockedMessages() {
            object[] results = this.Invoke("GetAllTransactionWithLockedMessages", new object[0]);
            return ((SCTransaction[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTransactionWithLockedMessagesAsync() {
            this.GetAllTransactionWithLockedMessagesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllTransactionWithLockedMessagesAsync(object userState) {
            if ((this.GetAllTransactionWithLockedMessagesOperationCompleted == null)) {
                this.GetAllTransactionWithLockedMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTransactionWithLockedMessagesOperationCompleted);
            }
            this.InvokeAsync("GetAllTransactionWithLockedMessages", new object[0], this.GetAllTransactionWithLockedMessagesOperationCompleted, userState);
        }
        
        private void OnGetAllTransactionWithLockedMessagesOperationCompleted(object arg) {
            if ((this.GetAllTransactionWithLockedMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTransactionWithLockedMessagesCompleted(this, new GetAllTransactionWithLockedMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProgressByTaskName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CSingleTaskProgress[] GetProgressByTaskName(string TaskName, short Status) {
            object[] results = this.Invoke("GetProgressByTaskName", new object[] {
                        TaskName,
                        Status});
            return ((CSingleTaskProgress[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProgressByTaskNameAsync(string TaskName, short Status) {
            this.GetProgressByTaskNameAsync(TaskName, Status, null);
        }
        
        /// <remarks/>
        public void GetProgressByTaskNameAsync(string TaskName, short Status, object userState) {
            if ((this.GetProgressByTaskNameOperationCompleted == null)) {
                this.GetProgressByTaskNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProgressByTaskNameOperationCompleted);
            }
            this.InvokeAsync("GetProgressByTaskName", new object[] {
                        TaskName,
                        Status}, this.GetProgressByTaskNameOperationCompleted, userState);
        }
        
        private void OnGetProgressByTaskNameOperationCompleted(object arg) {
            if ((this.GetProgressByTaskNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProgressByTaskNameCompleted(this, new GetProgressByTaskNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProgressByTaskNames", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CMultipleTaskProgress[] GetProgressByTaskNames(string FromTask, string ToTask, short Status) {
            object[] results = this.Invoke("GetProgressByTaskNames", new object[] {
                        FromTask,
                        ToTask,
                        Status});
            return ((CMultipleTaskProgress[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProgressByTaskNamesAsync(string FromTask, string ToTask, short Status) {
            this.GetProgressByTaskNamesAsync(FromTask, ToTask, Status, null);
        }
        
        /// <remarks/>
        public void GetProgressByTaskNamesAsync(string FromTask, string ToTask, short Status, object userState) {
            if ((this.GetProgressByTaskNamesOperationCompleted == null)) {
                this.GetProgressByTaskNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProgressByTaskNamesOperationCompleted);
            }
            this.InvokeAsync("GetProgressByTaskNames", new object[] {
                        FromTask,
                        ToTask,
                        Status}, this.GetProgressByTaskNamesOperationCompleted, userState);
        }
        
        private void OnGetProgressByTaskNamesOperationCompleted(object arg) {
            if ((this.GetProgressByTaskNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProgressByTaskNamesCompleted(this, new GetProgressByTaskNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CMessage {
        
        private string nameField;
        
        private bool isFormField;
        
        private bool lockedField;
        
        private System.DateTime lockedTimeField;
        
        private bool isEditModeField;
        
        private bool isCompletedField;
        
        private string[] rightsField;
        
        private System.Guid lockedByField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsForm {
            get {
                return this.isFormField;
            }
            set {
                this.isFormField = value;
            }
        }
        
        /// <remarks/>
        public bool Locked {
            get {
                return this.lockedField;
            }
            set {
                this.lockedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LockedTime {
            get {
                return this.lockedTimeField;
            }
            set {
                this.lockedTimeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEditMode {
            get {
                return this.isEditModeField;
            }
            set {
                this.isEditModeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsCompleted {
            get {
                return this.isCompletedField;
            }
            set {
                this.isCompletedField = value;
            }
        }
        
        /// <remarks/>
        public string[] Rights {
            get {
                return this.rightsField;
            }
            set {
                this.rightsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid LockedBy {
            get {
                return this.lockedByField;
            }
            set {
                this.lockedByField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CMultipleTaskProgress {
        
        private string transactionNoField;
        
        private string fromTaskField;
        
        private string toTaskField;
        
        private System.DateTime startedDateField;
        
        private System.Nullable<System.DateTime> completedDateField;
        
        private System.Nullable<int> noOfDaysField;
        
        /// <remarks/>
        public string TransactionNo {
            get {
                return this.transactionNoField;
            }
            set {
                this.transactionNoField = value;
            }
        }
        
        /// <remarks/>
        public string FromTask {
            get {
                return this.fromTaskField;
            }
            set {
                this.fromTaskField = value;
            }
        }
        
        /// <remarks/>
        public string ToTask {
            get {
                return this.toTaskField;
            }
            set {
                this.toTaskField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartedDate {
            get {
                return this.startedDateField;
            }
            set {
                this.startedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CompletedDate {
            get {
                return this.completedDateField;
            }
            set {
                this.completedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> NoOfDays {
            get {
                return this.noOfDaysField;
            }
            set {
                this.noOfDaysField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CSingleTaskProgress {
        
        private string taskField;
        
        private string transactionNoField;
        
        private System.DateTime startedDateField;
        
        private System.Nullable<System.DateTime> completedDateField;
        
        /// <remarks/>
        public string Task {
            get {
                return this.taskField;
            }
            set {
                this.taskField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionNo {
            get {
                return this.transactionNoField;
            }
            set {
                this.transactionNoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartedDate {
            get {
                return this.startedDateField;
            }
            set {
                this.startedDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> CompletedDate {
            get {
                return this.completedDateField;
            }
            set {
                this.completedDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SCTransaction {
        
        private string transactionNoField;
        
        private CMessage[] messagesField;
        
        /// <remarks/>
        public string TransactionNo {
            get {
                return this.transactionNoField;
            }
            set {
                this.transactionNoField = value;
            }
        }
        
        /// <remarks/>
        public CMessage[] Messages {
            get {
                return this.messagesField;
            }
            set {
                this.messagesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CApplication {
        
        private int idField;
        
        private System.Guid uniqueIdentifierField;
        
        private string codeField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UniqueIdentifier {
            get {
                return this.uniqueIdentifierField;
            }
            set {
                this.uniqueIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CTransactionType {
        
        private int idField;
        
        private System.Guid uniqueIdentifierField;
        
        private string codeField;
        
        private string nameField;
        
        private System.Guid applicationIdField;
        
        private string xMLFileField;
        
        private bool activeField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UniqueIdentifier {
            get {
                return this.uniqueIdentifierField;
            }
            set {
                this.uniqueIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ApplicationId {
            get {
                return this.applicationIdField;
            }
            set {
                this.applicationIdField = value;
            }
        }
        
        /// <remarks/>
        public string XMLFile {
            get {
                return this.xMLFileField;
            }
            set {
                this.xMLFileField = value;
            }
        }
        
        /// <remarks/>
        public bool Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CTransactionWithCreatedTime {
        
        private string transactionNoField;
        
        private System.DateTime createdTimeField;
        
        /// <remarks/>
        public string TransactionNo {
            get {
                return this.transactionNoField;
            }
            set {
                this.transactionNoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreatedTime {
            get {
                return this.createdTimeField;
            }
            set {
                this.createdTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CTransactionAndStartDate {
        
        private string transactionNoField;
        
        private System.DateTime startingDateField;
        
        /// <remarks/>
        public string TransactionNo {
            get {
                return this.transactionNoField;
            }
            set {
                this.transactionNoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartingDate {
            get {
                return this.startingDateField;
            }
            set {
                this.startingDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CTaskNameWithTranAndStartDate {
        
        private string taskNameField;
        
        private CTransactionAndStartDate[] transactionAndStartDateField;
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public CTransactionAndStartDate[] TransactionAndStartDate {
            get {
                return this.transactionAndStartDateField;
            }
            set {
                this.transactionAndStartDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OpenTransactionCompletedEventHandler(object sender, OpenTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpenTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpenTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string TransactionNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionsByTaskNameCompletedEventHandler(object sender, GetTransactionsByTaskNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionsByTaskNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionsByTaskNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetListOfTransactionsByTaskNameCompletedEventHandler(object sender, GetListOfTransactionsByTaskNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOfTransactionsByTaskNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOfTransactionsByTaskNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTaskNameWithTranAndStartDate[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTaskNameWithTranAndStartDate[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionsByTaskNameWithCreatedTimeCompletedEventHandler(object sender, GetTransactionsByTaskNameWithCreatedTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionsByTaskNameWithCreatedTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionsByTaskNameWithCreatedTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTransactionWithCreatedTime[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTransactionWithCreatedTime[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveTransactionCompletedEventHandler(object sender, RemoveTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RequestCompletedEventHandler(object sender, RequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResponseCompletedEventHandler(object sender, ResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionTypesCompletedEventHandler(object sender, GetTransactionTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTransactionType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTransactionType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveTransactionTypesCompletedEventHandler(object sender, GetActiveTransactionTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveTransactionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveTransactionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTransactionType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTransactionType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllTransactionTypesCompletedEventHandler(object sender, GetAllTransactionTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTransactionTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTransactionTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTransactionType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTransactionType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetActiveApplicationsCompletedEventHandler(object sender, GetActiveApplicationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActiveApplicationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActiveApplicationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CApplication[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CApplication[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EditRequestCompletedEventHandler(object sender, EditRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CMessage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CMessage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EditResponseCompletedEventHandler(object sender, EditResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CMessage[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseTransactionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockSpecificTransactionTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockMessageByUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllMessageByUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnlockAllMessagePassedDurationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveTransactionFromStackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllTransactionWithLockedMessagesCompletedEventHandler(object sender, GetAllTransactionWithLockedMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTransactionWithLockedMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTransactionWithLockedMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SCTransaction[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SCTransaction[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProgressByTaskNameCompletedEventHandler(object sender, GetProgressByTaskNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProgressByTaskNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProgressByTaskNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CSingleTaskProgress[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CSingleTaskProgress[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProgressByTaskNamesCompletedEventHandler(object sender, GetProgressByTaskNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProgressByTaskNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProgressByTaskNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CMultipleTaskProgress[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CMultipleTaskProgress[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591